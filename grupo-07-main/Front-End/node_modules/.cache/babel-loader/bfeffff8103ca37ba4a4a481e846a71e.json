{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0; // This function takes an array of styles and separates them into styles that\n// are handled by Aphrodite and inline styles.\n\nfunction separateStyles(stylesArray) {\n  var classNames = []; // Since determining if an Object is empty requires collecting all of its\n  // keys, and we want the best performance in this code because we are in the\n  // render path, we are going to do a little bookkeeping ourselves.\n\n  var hasInlineStyles = false;\n  var inlineStyles = {}; // This is run on potentially every node in the tree when rendering, where\n  // performance is critical. Normally we would prefer using `forEach`, but\n  // old-fashioned for loops are faster so that's what we have chosen here.\n\n  for (var i = 0; i < stylesArray.length; i++) {\n    // eslint-disable-line no-plusplus\n    var style = stylesArray[i]; // If this  style is falsy, we just want to disregard it. This allows for\n    // syntax like:\n    //\n    //   css(isFoo && styles.foo)\n\n    if (style) {\n      if (typeof style === 'string') {\n        classNames.push(style);\n      } else {\n        Object.assign(inlineStyles, style);\n        hasInlineStyles = true;\n      }\n    }\n  }\n\n  return {\n    classNames: classNames,\n    hasInlineStyles: hasInlineStyles,\n    inlineStyles: inlineStyles\n  };\n}\n\nvar _default = separateStyles;\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","separateStyles","stylesArray","classNames","hasInlineStyles","inlineStyles","i","length","style","push","assign","_default"],"sources":["C:/Users/nahue/LEANDRO/ProyectoIntegradorTerminado/grupo-07-main/Front-End/node_modules/react-with-styles-interface-css/dist/utils/separateStyles.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\n// This function takes an array of styles and separates them into styles that\n// are handled by Aphrodite and inline styles.\nfunction separateStyles(stylesArray) {\n  var classNames = []; // Since determining if an Object is empty requires collecting all of its\n  // keys, and we want the best performance in this code because we are in the\n  // render path, we are going to do a little bookkeeping ourselves.\n\n  var hasInlineStyles = false;\n  var inlineStyles = {}; // This is run on potentially every node in the tree when rendering, where\n  // performance is critical. Normally we would prefer using `forEach`, but\n  // old-fashioned for loops are faster so that's what we have chosen here.\n\n  for (var i = 0; i < stylesArray.length; i++) {\n    // eslint-disable-line no-plusplus\n    var style = stylesArray[i]; // If this  style is falsy, we just want to disregard it. This allows for\n    // syntax like:\n    //\n    //   css(isFoo && styles.foo)\n\n    if (style) {\n      if (typeof style === 'string') {\n        classNames.push(style);\n      } else {\n        Object.assign(inlineStyles, style);\n        hasInlineStyles = true;\n      }\n    }\n  }\n\n  return {\n    classNames: classNames,\n    hasInlineStyles: hasInlineStyles,\n    inlineStyles: inlineStyles\n  };\n}\n\nvar _default = separateStyles;\nexports[\"default\"] = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B,C,CAEA;AACA;;AACA,SAASE,cAAT,CAAwBC,WAAxB,EAAqC;EACnC,IAAIC,UAAU,GAAG,EAAjB,CADmC,CACd;EACrB;EACA;;EAEA,IAAIC,eAAe,GAAG,KAAtB;EACA,IAAIC,YAAY,GAAG,EAAnB,CANmC,CAMZ;EACvB;EACA;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACK,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;IAC3C;IACA,IAAIE,KAAK,GAAGN,WAAW,CAACI,CAAD,CAAvB,CAF2C,CAEf;IAC5B;IACA;IACA;;IAEA,IAAIE,KAAJ,EAAW;MACT,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7BL,UAAU,CAACM,IAAX,CAAgBD,KAAhB;MACD,CAFD,MAEO;QACLX,MAAM,CAACa,MAAP,CAAcL,YAAd,EAA4BG,KAA5B;QACAJ,eAAe,GAAG,IAAlB;MACD;IACF;EACF;;EAED,OAAO;IACLD,UAAU,EAAEA,UADP;IAELC,eAAe,EAAEA,eAFZ;IAGLC,YAAY,EAAEA;EAHT,CAAP;AAKD;;AAED,IAAIM,QAAQ,GAAGV,cAAf;AACAF,OAAO,CAAC,SAAD,CAAP,GAAqBY,QAArB"},"metadata":{},"sourceType":"script"}